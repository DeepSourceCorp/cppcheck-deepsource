use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Debug)]
pub struct Location {
    #[serde(rename = "@file")]
    pub file: String,
    #[serde(rename = "@line")]
    pub line: u32,
    #[serde(rename = "@column")]
    pub column: u32,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Error {
    #[serde(rename = "@id")]
    pub id: String,
    #[serde(rename = "@severity")]
    pub severity: String,
    #[serde(rename = "@msg")]
    pub msg: String,
    #[serde(rename = "@verbose")]
    pub verbose: String,
    #[serde(rename = "@file0")]
    pub file0: Option<String>,
    #[serde(rename = "@cwe")]
    pub cwe: Option<String>,
    pub location: Option<Vec<Location>>,
    pub symbol: Option<String>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Errors {
    #[serde(default)]
    pub error: Vec<Error>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Results {
    pub errors: Errors,
}

#[test]
fn t_xml() {
    let src = r##"
    <?xml version="1.0" encoding="UTF-8"?>
    <results version="2">
        <cppcheck version="2.10.3"/>
        <errors>
            <error id="missingReturn" severity="error" msg="Found an exit path from function with non-void return type that has missing return statement" verbose="Found an exit path from function with non-void return type that has missing return statement" cwe="758" file0="test/checks/a1002.c">
                <location file="test/checks/a1002.c" line="4" column="5"/>
            </error>
            <error id="misra-c2012-2.3" severity="style" msg="misra violation (use --rule-texts=&lt;file&gt; to get proper output)" verbose="misra violation (use --rule-texts=&lt;file&gt; to get proper output)">
                <location file="test/checks/use-using.cpp" line="196" column="45"/>
            </error>
            <error id="misra-c2012-2.3" severity="style" msg="misra violation (use --rule-texts=&lt;file&gt; to get proper output)" verbose="misra violation (use --rule-texts=&lt;file&gt; to get proper output)">
                <location file="test/checks/use-using.cpp" line="198" column="90"/>
            </error>
            <error id="misra-c2012-2.3" severity="style" msg="misra violation (use --rule-texts=&lt;file&gt; to get proper output)" verbose="misra violation (use --rule-texts=&lt;file&gt; to get proper output)">
                <location file="test/checks/use-using.cpp" line="200" column="111"/>
            </error>
            <error id="misra-c2012-2.5" severity="style" msg="misra violation (use --rule-texts=&lt;file&gt; to get proper output)" verbose="misra violation (use --rule-texts=&lt;file&gt; to get proper output)">
                <location file="test/checks/test_line_len_limit.c" line="1" column="0"/>
            </error>
            <error id="misra-c2012-5.8" severity="style" msg="misra violation (use --rule-texts=&lt;file&gt; to get proper output)" verbose="misra violation (use --rule-texts=&lt;file&gt; to get proper output)">
                <location file="test/checks/flp30-c.c" line="9" column="9"/>
            </error>
            <error id="misra-c2012-5.8" severity="style" msg="misra violation (use --rule-texts=&lt;file&gt; to get proper output)" verbose="misra violation (use --rule-texts=&lt;file&gt; to get proper output)">
                <location file="test/checks/msc32-c.c" line="26" column="7"/>
            </error>
        </errors>
    </results>
    "##;
    let _value: Results = quick_xml::de::from_str(src).unwrap();
}

pub(crate) fn mapping(s: &str) -> Option<String> {
    match s {
        // compiler only issue
        "misra-c2012-1.1" => Some("CXX-W2038".to_string()),
        "misra-c2012-1.2" => Some("CXX-W2038".to_string()),
        // implmented in CppCheck
        "misra-c2012-1.3" => Some("CXX-W2038".to_string()),
        "misra-c2012-1.4" => Some("CXX-W2038".to_string()),
        "misra-c2012-2.1" => Some("CXX-W2038".to_string()),
        "misra-c2012-2.2" => Some("CXX-W2038".to_string()),
        "misra-c2012-2.3" => Some("CXX-W2038".to_string()),
        "misra-c2012-2.4" => Some("CXX-W2038".to_string()),
        "misra-c2012-2.5" => Some("CXX-W2038".to_string()),
        "misra-c2012-2.6" => Some("CXX-W2038".to_string()),
        "misra-c2012-2.7" => Some("CXX-W2038".to_string()),
        "misra-c2012-3.1" => Some("CXX-W2038".to_string()),
        "misra-c2012-3.2" => Some("CXX-W2038".to_string()),
        "misra-c2012-4.1" => Some("CXX-W2038".to_string()),
        "misra-c2012-4.2" => Some("CXX-W2038".to_string()),
        "misra-c2012-5.1" => Some("CXX-W2038".to_string()),
        "misra-c2012-5.2" => Some("CXX-W2038".to_string()),
        "misra-c2012-5.3" => Some("CXX-W2038".to_string()),
        "misra-c2012-5.4" => Some("CXX-W2038".to_string()),
        "misra-c2012-5.5" => Some("CXX-W2038".to_string()),
        "misra-c2012-5.6" => Some("CXX-W2038".to_string()),
        "misra-c2012-5.7" => Some("CXX-W2038".to_string()),
        "misra-c2012-5.8" => Some("CXX-W2038".to_string()),
        "misra-c2012-5.9" => Some("CXX-W2038".to_string()),
        "misra-c2012-6.1" => Some("CXX-W2038".to_string()),
        "misra-c2012-6.2" => Some("CXX-W2038".to_string()),
        "misra-c2012-7.1" => Some("CXX-W2038".to_string()),
        "misra-c2012-7.2" => Some("CXX-W2038".to_string()),
        "misra-c2012-7.3" => Some("CXX-W2038".to_string()),
        "misra-c2012-7.4" => Some("CXX-W2038".to_string()),
        "misra-c2012-8.1" => Some("CXX-W2038".to_string()),
        "misra-c2012-8.2" => Some("CXX-W2038".to_string()),
        "misra-c2012-8.3" => Some("CXX-W2038".to_string()),
        "misra-c2012-8.4" => Some("CXX-W2038".to_string()),
        "misra-c2012-8.5" => Some("CXX-W2038".to_string()),
        "misra-c2012-8.6" => Some("CXX-W2038".to_string()),
        "misra-c2012-8.7" => Some("CXX-W2038".to_string()),
        "misra-c2012-8.8" => Some("CXX-W2038".to_string()),
        "misra-c2012-8.9" => Some("CXX-W2038".to_string()),
        "misra-c2012-8.10" => Some("CXX-W2038".to_string()),
        "misra-c2012-8.11" => Some("CXX-W2038".to_string()),
        "misra-c2012-8.12" => Some("CXX-W2038".to_string()),
        "misra-c2012-8.13" => Some("CXX-W2038".to_string()),
        "misra-c2012-8.14" => Some("CXX-W2038".to_string()),
        "misra-c2012-9.1" => Some("CXX-W2038".to_string()),
        "misra-c2012-9.2" => Some("CXX-W2038".to_string()),
        "misra-c2012-9.3" => Some("CXX-W2038".to_string()),
        "misra-c2012-9.4" => Some("CXX-W2038".to_string()),
        "misra-c2012-9.5" => Some("CXX-W2038".to_string()),
        "misra-c2012-10.1" => Some("CXX-W2038".to_string()),
        "misra-c2012-10.2" => Some("CXX-W2038".to_string()),
        "misra-c2012-10.3" => Some("CXX-W2038".to_string()),
        "misra-c2012-10.4" => Some("CXX-W2038".to_string()),
        "misra-c2012-10.5" => Some("CXX-W2038".to_string()),
        "misra-c2012-10.6" => Some("CXX-W2038".to_string()),
        "misra-c2012-10.7" => Some("CXX-W2038".to_string()),
        "misra-c2012-10.8" => Some("CXX-W2038".to_string()),
        "misra-c2012-11.1" => Some("CXX-W2038".to_string()),
        "misra-c2012-11.2" => Some("CXX-W2038".to_string()),
        "misra-c2012-11.3" => Some("CXX-W2038".to_string()),
        "misra-c2012-11.4" => Some("CXX-W2038".to_string()),
        "misra-c2012-11.5" => Some("CXX-W2038".to_string()),
        "misra-c2012-11.6" => Some("CXX-W2038".to_string()),
        "misra-c2012-11.7" => Some("CXX-W2038".to_string()),
        "misra-c2012-11.8" => Some("CXX-W2038".to_string()),
        "misra-c2012-11.9" => Some("CXX-W2038".to_string()),
        "misra-c2012-12.1" => Some("CXX-W2038".to_string()),
        "misra-c2012-12.2" => Some("CXX-W2038".to_string()),
        "misra-c2012-12.3" => Some("CXX-W2038".to_string()),
        "misra-c2012-12.4" => Some("CXX-W2038".to_string()),
        "misra-c2012-13.1" => Some("CXX-W2038".to_string()),
        "misra-c2012-13.2" => Some("CXX-W2038".to_string()),
        "misra-c2012-13.3" => Some("CXX-W2038".to_string()),
        "misra-c2012-13.4" => Some("CXX-W2038".to_string()),
        "misra-c2012-13.5" => Some("CXX-W2038".to_string()),
        "misra-c2012-13.6" => Some("CXX-W2038".to_string()),
        "misra-c2012-14.1" => Some("CXX-W2038".to_string()),
        "misra-c2012-14.2" => Some("CXX-W2038".to_string()),
        "misra-c2012-14.3" => Some("CXX-W2038".to_string()),
        "misra-c2012-14.4" => Some("CXX-W2038".to_string()),
        "misra-c2012-15.1" => Some("CXX-W2038".to_string()),
        "misra-c2012-15.2" => Some("CXX-W2038".to_string()),
        "misra-c2012-15.3" => Some("CXX-W2038".to_string()),
        "misra-c2012-15.4" => Some("CXX-W2038".to_string()),
        "misra-c2012-15.5" => Some("CXX-W2038".to_string()),
        "misra-c2012-15.6" => Some("CXX-W2038".to_string()),
        "misra-c2012-15.7" => Some("CXX-W2038".to_string()),
        "misra-c2012-16.1" => Some("CXX-W2038".to_string()),
        "misra-c2012-16.2" => Some("CXX-W2038".to_string()),
        "misra-c2012-16.3" => Some("CXX-W2038".to_string()),
        "misra-c2012-16.4" => Some("CXX-W2038".to_string()),
        "misra-c2012-16.5" => Some("CXX-W2038".to_string()),
        "misra-c2012-16.6" => Some("CXX-W2038".to_string()),
        "misra-c2012-16.7" => Some("CXX-W2038".to_string()),
        "misra-c2012-17.1" => Some("CXX-W2038".to_string()),
        "misra-c2012-17.2" => Some("CXX-W2038".to_string()),
        // compiler only issue
        "misra-c2012-17.3" => Some("CXX-W2038".to_string()),
        // -------------------
        "misra-c2012-17.4" => Some("CXX-W2038".to_string()),
        "misra-c2012-17.5" => Some("CXX-W2038".to_string()),
        "misra-c2012-17.6" => Some("CXX-W2038".to_string()),
        "misra-c2012-17.7" => Some("CXX-W2038".to_string()),
        "misra-c2012-17.8" => Some("CXX-W2038".to_string()),
        "misra-c2012-18.1" => Some("CXX-W2038".to_string()),
        "misra-c2012-18.2" => Some("CXX-W2038".to_string()),
        "misra-c2012-18.3" => Some("CXX-W2038".to_string()),
        "misra-c2012-18.4" => Some("CXX-W2038".to_string()),
        "misra-c2012-18.5" => Some("CXX-W2038".to_string()),
        "misra-c2012-18.6" => Some("CXX-W2038".to_string()),
        "misra-c2012-18.7" => Some("CXX-W2038".to_string()),
        "misra-c2012-18.8" => Some("CXX-W2038".to_string()),
        "misra-c2012-19.1" => Some("CXX-W2038".to_string()),
        "misra-c2012-19.2" => Some("CXX-W2038".to_string()),
        "misra-c2012-20.1" => Some("CXX-W2038".to_string()),
        "misra-c2012-20.2" => Some("CXX-W2038".to_string()),
        "misra-c2012-20.3" => Some("CXX-W2038".to_string()),
        "misra-c2012-20.4" => Some("CXX-W2038".to_string()),
        "misra-c2012-20.5" => Some("CXX-W2038".to_string()),
        "misra-c2012-20.6" => Some("CXX-W2038".to_string()),
        "misra-c2012-20.7" => Some("CXX-W2038".to_string()),
        "misra-c2012-20.8" => Some("CXX-W2038".to_string()),
        "misra-c2012-20.9" => Some("CXX-W2038".to_string()),
        "misra-c2012-20.10" => Some("CXX-W2038".to_string()),
        "misra-c2012-20.11" => Some("CXX-W2038".to_string()),
        "misra-c2012-20.12" => Some("CXX-W2038".to_string()),
        "misra-c2012-20.13" => Some("CXX-W2038".to_string()),
        "misra-c2012-20.14" => Some("CXX-W2038".to_string()),
        "misra-c2012-21.1" => Some("CXX-W2038".to_string()),
        "misra-c2012-21.2" => Some("CXX-W2038".to_string()),
        "misra-c2012-21.3" => Some("CXX-W2038".to_string()),
        "misra-c2012-21.4" => Some("CXX-W2038".to_string()),
        "misra-c2012-21.5" => Some("CXX-W2038".to_string()),
        "misra-c2012-21.6" => Some("CXX-W2038".to_string()),
        "misra-c2012-21.7" => Some("CXX-W2038".to_string()),
        "misra-c2012-21.8" => Some("CXX-W2038".to_string()),
        "misra-c2012-21.9" => Some("CXX-W2038".to_string()),
        "misra-c2012-21.10" => Some("CXX-W2038".to_string()),
        "misra-c2012-21.11" => Some("CXX-W2038".to_string()),
        "misra-c2012-21.12" => Some("CXX-W2038".to_string()),
        "misra-c2012-21.13" => Some("CXX-W2038".to_string()),
        "misra-c2012-21.14" => Some("CXX-W2038".to_string()),
        "misra-c2012-21.15" => Some("CXX-W2038".to_string()),
        "misra-c2012-21.16" => Some("CXX-W2038".to_string()),
        "misra-c2012-21.17" => Some("CXX-W2038".to_string()),
        "misra-c2012-21.18" => Some("CXX-W2038".to_string()),
        "misra-c2012-21.19" => Some("CXX-W2038".to_string()),
        "misra-c2012-21.20" => Some("CXX-W2038".to_string()),
        "misra-c2012-21.21" => Some("CXX-W2038".to_string()),
        "misra-c2012-22.1" => Some("CXX-W2038".to_string()),
        "misra-c2012-22.2" => Some("CXX-W2038".to_string()),
        "misra-c2012-22.3" => Some("CXX-W2038".to_string()),
        "misra-c2012-22.4" => Some("CXX-W2038".to_string()),
        "misra-c2012-22.5" => Some("CXX-W2038".to_string()),
        "misra-c2012-22.6" => Some("CXX-W2038".to_string()),
        "misra-c2012-22.7" => Some("CXX-W2038".to_string()),
        "misra-c2012-22.8" => Some("CXX-W2038".to_string()),
        "misra-c2012-22.9" => Some("CXX-W2038".to_string()),
        "misra-c2012-22.10" => Some("CXX-W2038".to_string()),
        // all other cpp check issues
        "purgedConfiguration" => Some("CXX-W2039".to_string()),
        "toomanyconfigs" => Some("CXX-W2039".to_string()),
        "AssignmentAddressToInteger" => Some("CXX-W2039".to_string()),
        "AssignmentIntegerToAddress" => Some("CXX-W2039".to_string()),
        "CastIntegerToAddressAtReturn" => Some("CXX-W2039".to_string()),
        "CastAddressToIntegerAtReturn" => Some("CXX-W2039".to_string()),
        "assertWithSideEffect" => Some("CXX-W2039".to_string()),
        "assignmentInAssert" => Some("CXX-W2039".to_string()),
        "autoVariables" => Some("CXX-W2039".to_string()),
        "returnReference" => Some("CXX-W2039".to_string()),
        "danglingReference" => Some("CXX-W2039".to_string()),
        "returnTempReference" => Some("CXX-W2039".to_string()),
        "danglingTempReference" => Some("CXX-W2039".to_string()),
        "autovarInvalidDeallocation" => Some("CXX-W2039".to_string()),
        "uselessAssignmentArg" => Some("CXX-W2039".to_string()),
        "uselessAssignmentPtrArg" => Some("CXX-W2039".to_string()),
        "returnDanglingLifetime" => Some("CXX-W2039".to_string()),
        "invalidLifetime" => Some("CXX-W2039".to_string()),
        "danglingLifetime" => Some("CXX-W2039".to_string()),
        "danglingTemporaryLifetime" => Some("CXX-W2039".to_string()),
        "assignBoolToPointer" => Some("CXX-W2039".to_string()),
        "assignBoolToFloat" => Some("CXX-W2039".to_string()),
        "comparisonOfFuncReturningBoolError" => Some("CXX-W2039".to_string()),
        "comparisonOfTwoFuncsReturningBoolError" => Some("CXX-W2039".to_string()),
        "comparisonOfBoolWithBoolError" => Some("CXX-W2039".to_string()),
        "incrementboolean" => Some("CXX-W2039".to_string()),
        "bitwiseOnBoolean" => Some("CXX-W2039".to_string()),
        "compareBoolExpressionWithInt" => Some("CXX-W2039".to_string()),
        "pointerArithBool" => Some("CXX-W2039".to_string()),
        "comparisonOfBoolWithInvalidComparator" => Some("CXX-W2039".to_string()),
        "returnNonBoolInBooleanFunction" => Some("CXX-W2039".to_string()),
        "boostForeachError" => Some("CXX-W2039".to_string()),
        "arrayIndexOutOfBounds" => Some("CXX-W2039".to_string()),
        "arrayIndexOutOfBoundsCond" => Some("CXX-W2039".to_string()),
        "pointerOutOfBounds" => Some("CXX-W2039".to_string()),
        "negativeIndex" => Some("CXX-W2039".to_string()),
        "arrayIndexThenCheck" => Some("CXX-W2039".to_string()),
        "bufferAccessOutOfBounds" => Some("CXX-W2039".to_string()),
        "objectIndex" => Some("CXX-W2039".to_string()),
        "argumentSize" => Some("CXX-W2039".to_string()),
        "negativeMemoryAllocationSize" => Some("CXX-W2039".to_string()),
        "negativeArraySize" => Some("CXX-W2039".to_string()),
        "invalidFunctionArg" => Some("CXX-W2039".to_string()),
        "invalidFunctionArgBool" => Some("CXX-W2039".to_string()),
        "invalidFunctionArgStr" => Some("CXX-W2039".to_string()),
        "ignoredReturnValue" => Some("CXX-W2039".to_string()),
        "wrongmathcall" => Some("CXX-W2039".to_string()),
        "unpreciseMathCall" => Some("CXX-W2039".to_string()),
        "memsetZeroBytes" => Some("CXX-W2039".to_string()),
        "memsetFloat" => Some("CXX-W2039".to_string()),
        "memsetValueOutOfRange" => Some("CXX-W2039".to_string()),
        "missingReturn" => Some("CXX-W2039".to_string()),
        "returnStdMoveLocal" => Some("CXX-W2039".to_string()),
        "useStandardLibrary" => Some("CXX-W2039".to_string()),
        "noConstructor" => Some("CXX-W2039".to_string()),
        "noExplicitConstructor" => Some("CXX-W2039".to_string()),
        "copyCtorPointerCopying" => Some("CXX-W2039".to_string()),
        "noCopyConstructor" => Some("CXX-W2039".to_string()),
        "noOperatorEq" => Some("CXX-W2039".to_string()),
        "noDestructor" => Some("CXX-W2039".to_string()),
        "uninitMemberVar" => Some("CXX-W2039".to_string()),
        "uninitMemberVarPrivate" => Some("CXX-W2039".to_string()),
        "uninitDerivedMemberVar" => Some("CXX-W2039".to_string()),
        "uninitDerivedMemberVarPrivate" => Some("CXX-W2039".to_string()),
        "missingMemberCopy" => Some("CXX-W2039".to_string()),
        "operatorEqVarError" => Some("CXX-W2039".to_string()),
        "unusedPrivateFunction" => Some("CXX-W2039".to_string()),
        "memsetClass" => Some("CXX-W2039".to_string()),
        "memsetClassReference" => Some("CXX-W2039".to_string()),
        "memsetClassFloat" => Some("CXX-W2039".to_string()),
        "mallocOnClassWarning" => Some("CXX-W2039".to_string()),
        "mallocOnClassError" => Some("CXX-W2039".to_string()),
        "virtualDestructor" => Some("CXX-W2039".to_string()),
        "thisSubtraction" => Some("CXX-W2039".to_string()),
        "operatorEqRetRefThis" => Some("CXX-W2039".to_string()),
        "operatorEqMissingReturnStatement" => Some("CXX-W2039".to_string()),
        "operatorEqShouldBeLeftUnimplemented" => Some("CXX-W2039".to_string()),
        "operatorEqToSelf" => Some("CXX-W2039".to_string()),
        "functionConst" => Some("CXX-W2039".to_string()),
        "functionStatic" => Some("CXX-W2039".to_string()),
        "initializerList" => Some("CXX-W2039".to_string()),
        "useInitializationList" => Some("CXX-W2039".to_string()),
        "selfInitialization" => Some("CXX-W2039".to_string()),
        "duplInheritedMember" => Some("CXX-W2039".to_string()),
        "copyCtorAndEqOperator" => Some("CXX-W2039".to_string()),
        "pureVirtualCall" => Some("CXX-W2039".to_string()),
        "virtualCallInConstructor" => Some("CXX-W2039".to_string()),
        "missingOverride" => Some("CXX-W2039".to_string()),
        "thisUseAfterFree" => Some("CXX-W2039".to_string()),
        "unsafeClassRefMember" => Some("CXX-W2039".to_string()),
        "assignIfError" => Some("CXX-W2039".to_string()),
        "badBitmaskCheck" => Some("CXX-W2039".to_string()),
        "comparisonError" => Some("CXX-W2039".to_string()),
        "duplicateCondition" => Some("CXX-W2039".to_string()),
        "multiCondition" => Some("CXX-W2039".to_string()),
        "mismatchingBitAnd" => Some("CXX-W2039".to_string()),
        "oppositeInnerCondition" => Some("CXX-W2039".to_string()),
        "identicalInnerCondition" => Some("CXX-W2039".to_string()),
        "identicalConditionAfterEarlyExit" => Some("CXX-W2039".to_string()),
        "incorrectLogicOperator" => Some("CXX-W2039".to_string()),
        "redundantCondition" => Some("CXX-W2039".to_string()),
        "moduloAlwaysTrueFalse" => Some("CXX-W2039".to_string()),
        "clarifyCondition" => Some("CXX-W2039".to_string()),
        "knownConditionTrueFalse" => Some("CXX-W2039".to_string()),
        "invalidTestForOverflow" => Some("CXX-W2039".to_string()),
        "pointerAdditionResultNotNull" => Some("CXX-W2039".to_string()),
        "duplicateConditionalAssign" => Some("CXX-W2039".to_string()),
        "assignmentInCondition" => Some("CXX-W2039".to_string()),
        "compareValueOutOfTypeRangeError" => Some("CXX-W2039".to_string()),
        "exceptThrowInDestructor" => Some("CXX-W2039".to_string()),
        "exceptDeallocThrow" => Some("CXX-W2039".to_string()),
        "exceptRethrowCopy" => Some("CXX-W2039".to_string()),
        "catchExceptionByValue" => Some("CXX-W2039".to_string()),
        "throwInNoexceptFunction" => Some("CXX-W2039".to_string()),
        "unhandledExceptionSpecification" => Some("CXX-W2039".to_string()),
        "rethrowNoCurrentException" => Some("CXX-W2039".to_string()),
        "coutCerrMisusage" => Some("CXX-W2039".to_string()),
        "fflushOnInputStream" => Some("CXX-W2039".to_string()),
        "IOWithoutPositioning" => Some("CXX-W2039".to_string()),
        "readWriteOnlyFile" => Some("CXX-W2039".to_string()),
        "writeReadOnlyFile" => Some("CXX-W2039".to_string()),
        "useClosedFile" => Some("CXX-W2039".to_string()),
        "seekOnAppendedFile" => Some("CXX-W2039".to_string()),
        "incompatibleFileOpen" => Some("CXX-W2039".to_string()),
        "invalidscanf" => Some("CXX-W2039".to_string()),
        "wrongPrintfScanfArgNum" => Some("CXX-W2039".to_string()),
        "invalidScanfArgType_s" => Some("CXX-W2039".to_string()),
        "invalidScanfArgType_int" => Some("CXX-W2039".to_string()),
        "invalidScanfArgType_float" => Some("CXX-W2039".to_string()),
        "invalidPrintfArgType_s" => Some("CXX-W2039".to_string()),
        "invalidPrintfArgType_n" => Some("CXX-W2039".to_string()),
        "invalidPrintfArgType_p" => Some("CXX-W2039".to_string()),
        "invalidPrintfArgType_uint" => Some("CXX-W2039".to_string()),
        "invalidPrintfArgType_sint" => Some("CXX-W2039".to_string()),
        "invalidPrintfArgType_float" => Some("CXX-W2039".to_string()),
        "invalidLengthModifierError" => Some("CXX-W2039".to_string()),
        "invalidScanfFormatWidth" => Some("CXX-W2039".to_string()),
        "invalidScanfFormatWidth_smaller" => Some("CXX-W2039".to_string()),
        "wrongPrintfScanfParameterPositionError" => Some("CXX-W2039".to_string()),
        "deallocret" => Some("CXX-W2039".to_string()),
        "doubleFree" => Some("CXX-W2039".to_string()),
        "leakNoVarFunctionCall" => Some("CXX-W2039".to_string()),
        "leakReturnValNotUsed" => Some("CXX-W2039".to_string()),
        "leakUnsafeArgAlloc" => Some("CXX-W2039".to_string()),
        "publicAllocationError" => Some("CXX-W2039".to_string()),
        "unsafeClassCanLeak" => Some("CXX-W2039".to_string()),
        "memleak" => Some("CXX-W2039".to_string()),
        "resourceLeak" => Some("CXX-W2039".to_string()),
        "deallocuse" => Some("CXX-W2039".to_string()),
        "mismatchAllocDealloc" => Some("CXX-W2039".to_string()),
        "memleakOnRealloc" => Some("CXX-W2039".to_string()),
        "nullPointer" => Some("CXX-W2039".to_string()),
        "nullPointerDefaultArg" => Some("CXX-W2039".to_string()),
        "nullPointerRedundantCheck" => Some("CXX-W2039".to_string()),
        "nullPointerArithmetic" => Some("CXX-W2039".to_string()),
        "nullPointerArithmeticRedundantCheck" => Some("CXX-W2039".to_string()),
        "zerodiv" => Some("CXX-W2039".to_string()),
        "zerodivcond" => Some("CXX-W2039".to_string()),
        "unusedScopedObject" => Some("CXX-W2039".to_string()),
        "invalidPointerCast" => Some("CXX-W2039".to_string()),
        "shiftNegativeLHS" => Some("CXX-W2039".to_string()),
        "shiftNegative" => Some("CXX-W2039".to_string()),
        "raceAfterInterlockedDecrement" => Some("CXX-W2039".to_string()),
        "invalidFree" => Some("CXX-W2039".to_string()),
        "overlappingWriteUnion" => Some("CXX-W2039".to_string()),
        "overlappingWriteFunction" => Some("CXX-W2039".to_string()),
        "redundantCopyLocalConst" => Some("CXX-W2039".to_string()),
        "redundantCopy" => Some("CXX-W2039".to_string()),
        "comparisonFunctionIsAlwaysTrueOrFalse" => Some("CXX-W2039".to_string()),
        "checkCastIntToCharAndBack" => Some("CXX-W2039".to_string()),
        "cstyleCast" => Some("CXX-W2039".to_string()),
        "passedByValue" => Some("CXX-W2039".to_string()),
        "constParameter" => Some("CXX-W2039".to_string()),
        "constVariable" => Some("CXX-W2039".to_string()),
        "constParameterCallback" => Some("CXX-W2039".to_string()),
        "constStatement" => Some("CXX-W2039".to_string()),
        "signedCharArrayIndex" => Some("CXX-W2039".to_string()),
        "unknownSignCharArrayIndex" => Some("CXX-W2039".to_string()),
        "charBitOp" => Some("CXX-W2039".to_string()),
        "variableScope" => Some("CXX-W2039".to_string()),
        "redundantAssignInSwitch" => Some("CXX-W2039".to_string()),
        "suspiciousCase" => Some("CXX-W2039".to_string()),
        "selfAssignment" => Some("CXX-W2039".to_string()),
        "clarifyCalculation" => Some("CXX-W2039".to_string()),
        "clarifyStatement" => Some("CXX-W2039".to_string()),
        "duplicateBranch" => Some("CXX-W2039".to_string()),
        "duplicateAssignExpression" => Some("CXX-W2039".to_string()),
        "oppositeExpression" => Some("CXX-W2039".to_string()),
        "duplicateExpression" => Some("CXX-W2039".to_string()),
        "duplicateValueTernary" => Some("CXX-W2039".to_string()),
        "duplicateExpressionTernary" => Some("CXX-W2039".to_string()),
        "duplicateBreak" => Some("CXX-W2039".to_string()),
        "unreachableCode" => Some("CXX-W2039".to_string()),
        "unsignedLessThanZero" => Some("CXX-W2039".to_string()),
        "unsignedPositive" => Some("CXX-W2039".to_string()),
        "pointerLessThanZero" => Some("CXX-W2039".to_string()),
        "pointerPositive" => Some("CXX-W2039".to_string()),
        "suspiciousSemicolon" => Some("CXX-W2039".to_string()),
        "incompleteArrayFill" => Some("CXX-W2039".to_string()),
        "varFuncNullUB" => Some("CXX-W2039".to_string()),
        "nanInArithmeticExpression" => Some("CXX-W2039".to_string()),
        "commaSeparatedReturn" => Some("CXX-W2039".to_string()),
        "redundantPointerOp" => Some("CXX-W2039".to_string()),
        "unusedLabel" => Some("CXX-W2039".to_string()),
        "unusedLabelConfiguration" => Some("CXX-W2039".to_string()),
        "unusedLabelSwitch" => Some("CXX-W2039".to_string()),
        "unusedLabelSwitchConfiguration" => Some("CXX-W2039".to_string()),
        "unknownEvaluationOrder" => Some("CXX-W2039".to_string()),
        "accessMoved" => Some("CXX-W2039".to_string()),
        "accessForwarded" => Some("CXX-W2039".to_string()),
        "funcArgNamesDifferent" => Some("CXX-W2039".to_string()),
        "redundantBitwiseOperationInSwitch" => Some("CXX-W2039".to_string()),
        "shadowVariable" => Some("CXX-W2039".to_string()),
        "shadowFunction" => Some("CXX-W2039".to_string()),
        "shadowArgument" => Some("CXX-W2039".to_string()),
        "knownArgument" => Some("CXX-W2039".to_string()),
        "knownArgumentHiddenVariableExpression" => Some("CXX-W2039".to_string()),
        "comparePointers" => Some("CXX-W2039".to_string()),
        "redundantAssignment" => Some("CXX-W2039".to_string()),
        "redundantInitialization" => Some("CXX-W2039".to_string()),
        "funcArgOrderDifferent" => Some("CXX-W2039".to_string()),
        "moduloofone" => Some("CXX-W2039".to_string()),
        "containerOutOfBounds" => Some("CXX-W2039".to_string()),
        "invalidIterator1" => Some("CXX-W2039".to_string()),
        "iterators1" => Some("CXX-W2039".to_string()),
        "iterators2" => Some("CXX-W2039".to_string()),
        "iterators3" => Some("CXX-W2039".to_string()),
        "invalidContainerLoop" => Some("CXX-W2039".to_string()),
        "invalidContainer" => Some("CXX-W2039".to_string()),
        "mismatchingContainerIterator" => Some("CXX-W2039".to_string()),
        "mismatchingContainers" => Some("CXX-W2039".to_string()),
        "mismatchingContainerExpression" => Some("CXX-W2039".to_string()),
        "sameIteratorExpression" => Some("CXX-W2039".to_string()),
        "eraseDereference" => Some("CXX-W2039".to_string()),
        "stlOutOfBounds" => Some("CXX-W2039".to_string()),
        "negativeContainerIndex" => Some("CXX-W2039".to_string()),
        "stlBoundaries" => Some("CXX-W2039".to_string()),
        "stlIfFind" => Some("CXX-W2039".to_string()),
        "stlIfStrFind" => Some("CXX-W2039".to_string()),
        "stlFindInsert" => Some("CXX-W2039".to_string()),
        "stlcstr" => Some("CXX-W2039".to_string()),
        "stlcstrReturn" => Some("CXX-W2039".to_string()),
        "stlcstrParam" => Some("CXX-W2039".to_string()),
        "stlcstrthrow" => Some("CXX-W2039".to_string()),
        "stlSize" => Some("CXX-W2039".to_string()),
        "StlMissingComparison" => Some("CXX-W2039".to_string()),
        "redundantIfRemove" => Some("CXX-W2039".to_string()),
        "uselessCallsCompare" => Some("CXX-W2039".to_string()),
        "uselessCallsSwap" => Some("CXX-W2039".to_string()),
        "uselessCallsSubstr" => Some("CXX-W2039".to_string()),
        "uselessCallsEmpty" => Some("CXX-W2039".to_string()),
        "uselessCallsRemove" => Some("CXX-W2039".to_string()),
        "derefInvalidIterator" => Some("CXX-W2039".to_string()),
        "useStlAlgorithm" => Some("CXX-W2039".to_string()),
        "knownEmptyContainer" => Some("CXX-W2039".to_string()),
        "globalLockGuard" => Some("CXX-W2039".to_string()),
        "localMutex" => Some("CXX-W2039".to_string()),
        "sizeofwithsilentarraypointer" => Some("CXX-W2039".to_string()),
        "pointerSize" => Some("CXX-W2039".to_string()),
        "sizeofDivisionMemfunc" => Some("CXX-W2039".to_string()),
        "sizeofwithnumericparameter" => Some("CXX-W2039".to_string()),
        "sizeofsizeof" => Some("CXX-W2039".to_string()),
        "sizeofCalculation" => Some("CXX-W2039".to_string()),
        "sizeofFunctionCall" => Some("CXX-W2039".to_string()),
        "multiplySizeof" => Some("CXX-W2039".to_string()),
        "divideSizeof" => Some("CXX-W2039".to_string()),
        "sizeofVoid" => Some("CXX-W2039".to_string()),
        "sizeofDereferencedVoidPointer" => Some("CXX-W2039".to_string()),
        "arithOperationsOnVoidPointer" => Some("CXX-W2039".to_string()),
        "stringLiteralWrite" => Some("CXX-W2039".to_string()),
        "sprintfOverlappingData" => Some("CXX-W2039".to_string()),
        "strPlusChar" => Some("CXX-W2039".to_string()),
        "incorrectStringCompare" => Some("CXX-W2039".to_string()),
        "literalWithCharPtrCompare" => Some("CXX-W2039".to_string()),
        "charLiteralWithCharPtrCompare" => Some("CXX-W2039".to_string()),
        "incorrectStringBooleanError" => Some("CXX-W2039".to_string()),
        "incorrectCharBooleanError" => Some("CXX-W2039".to_string()),
        "staticStringCompare" => Some("CXX-W2039".to_string()),
        "stringCompare" => Some("CXX-W2039".to_string()),
        "overlappingStrcmp" => Some("CXX-W2039".to_string()),
        "shiftTooManyBits" => Some("CXX-W2039".to_string()),
        "shiftTooManyBitsSigned" => Some("CXX-W2039".to_string()),
        "integerOverflow" => Some("CXX-W2039".to_string()),
        "signConversion" => Some("CXX-W2039".to_string()),
        "truncLongCastAssignment" => Some("CXX-W2039".to_string()),
        "truncLongCastReturn" => Some("CXX-W2039".to_string()),
        "floatConversionOverflow" => Some("CXX-W2039".to_string()),
        "uninitdata" => Some("CXX-W2039".to_string()),
        "uninitStructMember" => Some("CXX-W2039".to_string()),
        "unusedFunction" => Some("CXX-W2039".to_string()),
        "unusedVariable" => Some("CXX-W2039".to_string()),
        "unusedAllocatedMemory" => Some("CXX-W2039".to_string()),
        "unreadVariable" => Some("CXX-W2039".to_string()),
        "unassignedVariable" => Some("CXX-W2039".to_string()),
        "unusedStructMember" => Some("CXX-W2039".to_string()),
        "postfixOperator" => Some("CXX-W2039".to_string()),
        "va_start_wrongParameter" => Some("CXX-W2039".to_string()),
        "va_start_referencePassed" => Some("CXX-W2039".to_string()),
        "va_end_missing" => Some("CXX-W2039".to_string()),
        "va_list_usedBeforeStarted" => Some("CXX-W2039".to_string()),
        "va_start_subsequentCalls" => Some("CXX-W2039".to_string()),
        "missingInclude" => Some("CXX-W2039".to_string()),
        "missingIncludeSystem" => Some("CXX-W2039".to_string()),
        "ConfigurationNotChecked" => Some("CXX-W2039".to_string()),
        "preprocessorErrorDirective" => Some("CXX-W2039".to_string()),
        _ => None,
    }
}
